{"version":3,"sources":["webpack:///./src/views/Instances.vue?9549","webpack:///./src/components/instance.vue?1ac6","webpack:///./src/description.ts","webpack:///./src/views/Instances.vue","webpack:///./src/components/instance.vue","webpack:///./node_modules/punycode/punycode.es6.js","webpack:///./src/components/instance.vue?b1ef","webpack:///./src/components/instance.vue?ea82","webpack:///./src/views/Instances.vue?7cb0","webpack:///./src/views/Instances.vue?6fe8"],"names":["descriptionTag","document","querySelector","setDescription","title","description","setAttribute","id","to","loading","instances","instance","key","url","href","class","hasName","meta","name","maxInt","base","tMin","tMax","skew","damp","initialBias","initialN","delimiter","regexPunycode","regexNonASCII","regexSeparators","errors","baseMinusTMin","floor","Math","stringFromCharCode","String","fromCharCode","error","type","RangeError","map","array","fn","result","length","mapDomain","string","parts","split","replace","labels","encoded","join","ucs2decode","output","counter","value","charCodeAt","extra","push","ucs2encode","fromCodePoint","basicToDigit","codePoint","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","decode","input","inputLength","i","n","bias","basic","lastIndexOf","j","index","oldi","w","t","baseMinusT","out","splice","encode","currentValue","basicLength","handledCPCount","m","handledCPCountPlusOne","q","qMinusT","toUnicode","test","slice","toLowerCase","toASCII","punycode","props","Object","required","components","uniUrl","this","methods","render","__scopeId","Instance","sortedInstances","fetch","then","res","json","concat","instancesInfos","$t"],"mappings":"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","file":"js/chunk-02f83f9c.0ee13139.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Instances.vue?vue&type=style&index=0&id=03ef341b&lang=scss\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./instance.vue?vue&type=style&index=0&id=34e7cdc8&lang=scss&scoped=true\"","const descriptionTag = document.querySelector('meta[name=\\'description\\']');\n\nexport function setDescription(title: string, description: string) {\n    document.title = title;\n    descriptionTag?.setAttribute('content', description);\n}\n","<template>\n  <div id=\"instances\">\n    <router-link to=\"/\">Back</router-link>\n    <h1 v-text=\"$ts['instances-list']\" />\n    <p v-text=\"$ts['instances-list-description']\" />\n    <div id=\"instances-list\" v-if=\"!loading\">\n      <Instance v-for=\"instance in instances\" :key=\"instance.url\" :instance=\"instance\" />\n    </div>\n    <div id=\"instances-loading\" v-text=\"$ts['loading']\" v-else/>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue';\nimport { setDescription } from '@/description';\nimport Instance from '@/components/instance.vue';\n\nexport default defineComponent({\n  name: 'Instances',\n\n  components: {\n    Instance\n  },\n\n  data() {\n    return {\n      loading: true,\n      instances: [] as any[],\n      sortedInstances: [] as any[],\n    }\n  },\n\n  created() {\n    fetch('https://instanceapp.misskey.page/instances.json')\n      .then(res => res.json())\n      .then(res => {\n        this.loading = false;\n        this.instances = [].concat(res.instancesInfos);\n        this.sortedInstances = [].concat(res.instancesInfos);\n      });\n  },\n\n  mounted() {\n    setDescription(this.$t('instances-list'), this.$t('instances-list-description'));\n  },\n\n  methods: {\n    \n  },\n});\n</script>\n\n<style lang=\"scss\">\n  #instances {\n    margin: 1rem;\n\n    .instance {\n      margin-bottom: 1rem;\n    }\n  }\n</style>\n","<template>\n  <a :href=\"`https://${instance.url}/`\" class=\"instance\">\n    <div class=\"instance-title\" :class=\"{ hasName }\">\n      <template v-if=\"hasName\"><span class=\"instance-name\" v-text=\"instance.meta.name\" /> <span class=\"instance-url\" v-text=\"uniUrl\" /></template>\n      <template v-else><span class=\"instance-url\" v-text=\"uniUrl\" /></template>\n    </div>\n  </a>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue';\nimport punycode from 'punycode/punycode.es6';\n\nexport default defineComponent({\n  name: 'Instances',\n\n  props: {\n    instance: {\n      type: Object,\n      required: true\n    },\n  },\n\n  components: {\n  },\n\n  data() {\n    return {\n      uniUrl: punycode.toUnicode(this.instance.url),\n      hasName: this.instance.meta.name ? this.instance.meta.name !== this.uniUrl : false,\n    }\n  },\n\n  methods: {\n  },\n});\n</script>\n\n<style lang=\"scss\" scoped>\n  .instance {\n    display: block;\n    color: var(--fg);\n\n    .hasName {\n      .instance-name {\n        font-weight: 700;\n      }\n    }\n    \n    :not(.hasName) {\n      .instance-url {\n        font-weight: 700;\n      }\n    }\n  }\n\n  .text-bold {\n    font-weight: 700;\n  }\n</style>\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tconst parts = string.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tconst labels = string.split('.');\n\tconst encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = array => String.fromCodePoint(...array);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tlet oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tlet inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tlet basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue == n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.1.0',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n","\nimport { defineComponent } from 'vue';\nimport punycode from 'punycode/punycode.es6';\n\nexport default defineComponent({\n  name: 'Instances',\n\n  props: {\n    instance: {\n      type: Object,\n      required: true\n    },\n  },\n\n  components: {\n  },\n\n  data() {\n    return {\n      uniUrl: punycode.toUnicode(this.instance.url),\n      hasName: this.instance.meta.name ? this.instance.meta.name !== this.uniUrl : false,\n    }\n  },\n\n  methods: {\n  },\n});\n","import { render } from \"./instance.vue?vue&type=template&id=34e7cdc8&scoped=true\"\nimport script from \"./instance.vue?vue&type=script&lang=ts\"\nexport * from \"./instance.vue?vue&type=script&lang=ts\"\n\nimport \"./instance.vue?vue&type=style&index=0&id=34e7cdc8&lang=scss&scoped=true\"\nscript.render = render\nscript.__scopeId = \"data-v-34e7cdc8\"\n\nexport default script","\nimport { defineComponent } from 'vue';\nimport { setDescription } from '@/description';\nimport Instance from '@/components/instance.vue';\n\nexport default defineComponent({\n  name: 'Instances',\n\n  components: {\n    Instance\n  },\n\n  data() {\n    return {\n      loading: true,\n      instances: [] as any[],\n      sortedInstances: [] as any[],\n    }\n  },\n\n  created() {\n    fetch('https://instanceapp.misskey.page/instances.json')\n      .then(res => res.json())\n      .then(res => {\n        this.loading = false;\n        this.instances = [].concat(res.instancesInfos);\n        this.sortedInstances = [].concat(res.instancesInfos);\n      });\n  },\n\n  mounted() {\n    setDescription(this.$t('instances-list'), this.$t('instances-list-description'));\n  },\n\n  methods: {\n    \n  },\n});\n","import { render } from \"./Instances.vue?vue&type=template&id=03ef341b\"\nimport script from \"./Instances.vue?vue&type=script&lang=ts\"\nexport * from \"./Instances.vue?vue&type=script&lang=ts\"\n\nimport \"./Instances.vue?vue&type=style&index=0&id=03ef341b&lang=scss\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}